plugins {
    id 'java'
    id 'groovy'
//    id "com.github.spotbugs" version "4.5.1"
    id 'checkstyle'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id 'distribution'
    id 'jacoco'
    id 'maven'
    id 'com.github.kt3k.coveralls' version '2.10.2'
}

version = '2.0.0'

ext {
    javaVersion = '1.8'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    maven {
        url "https://dl.bintray.com/omegat-org/maven"
    }
    maven {
        url "https://dl.bintray.com/eb4j/maven/"
    }
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25'
    implementation 'io.github.eb4j:eb4j:1.99.3'
    compileOnly 'org.omegat:omegat:5.2.0'
    compileOnly 'commons-io:commons-io:2.7'
    compileOnly 'commons-lang:commons-lang:2.6'
    compileOnly 'org.slf4j:slf4j-nop:1.7.25'
    testImplementation 'org.omegat:omegat:5.2.0'
    testImplementation 'commons-io:commons-io:2.5'
    testImplementation 'commons-lang:commons-lang:2.6'
    testImplementation "org.codehaus.groovy:groovy-all:3.0.1"
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0'
}

jacoco {
    toolVersion = '0.8.6'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes("OmegaT-Plugins": "tokyo.northside.omegat.epwing.OmegaTEpwingDictionary")
    }
}

//spotbugs {
//  toolVersion = '4.1.4'
//}

spotless {
    enforceCheck false
    java {
        removeUnusedImports()
    }
}

task changedOnBranch {
    description = 'List files that have been modified on this git branch.'
    doLast {
        ext.files = project.files(gitModifiedFiles())
        ext.files.each { println(it) }
    }
}

task spotlessChangedApply {
    description = 'Apply code formatting to files that have been changed on the current branch.'
    finalizedBy 'spotlessApply'
    dependsOn changedOnBranch
    doFirst {
        spotlessJava.target = changedOnBranch.files.findAll {
            it.path.endsWith('.java')
        }
    }
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

artifacts {
    archives jar
}

distTar {
  compression = Compression.GZIP
}


distributions {
    main {
        contents {
            from(jar)
            from('README.md', 'COPYING', 'CHANGELOG.md')
        }
    }
}

plugins {
    id 'java'
    id 'groovy'
    id "com.github.spotbugs" version "3.0.0"
    id 'checkstyle'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id 'distribution'
    id 'jacoco'
    id 'maven'
}

version = '1.2'

ext {
    javaVersion = '1.8'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    maven {
        url "https://dl.bintray.com/omegat-org/maven"
    }
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile fileTree(dir: 'lib', include: "**/*.jar")
    compileOnly 'org.omegat:omegat:5.2.0'
    compileOnly 'commons-io:commons-io:2.7'
    compileOnly 'commons-lang:commons-lang:2.6'
    compileOnly 'org.slf4j:slf4j-nop:1.7.25'
    testImplementation 'org.omegat:omegat:5.2.0'
    testImplementation 'commons-io:commons-io:2.5'
    testImplementation 'commons-lang:commons-lang:2.6'
    testImplementation 'junit:junit:4.13'
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes("OmegaT-Plugins": "tokyo.northside.omegat.plugin.EBDict")
    }
}

spotless {
    enforceCheck false
    java {
        removeUnusedImports()
    }
}

task changedOnBranch {
    description = 'List files that have been modified on this git branch.'
    doLast {
        ext.files = project.files(gitModifiedFiles())
        ext.files.each { println(it) }
    }
}

task spotlessChangedApply {
    description = 'Apply code formatting to files that have been changed on the current branch.'
    finalizedBy 'spotlessApply'
    dependsOn changedOnBranch
    doFirst {
        spotlessJava.target = changedOnBranch.files.findAll {
            it.path.endsWith('.java')
        }
    }
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    ignoreFailures = true
}

artifacts {
    archives jar
}

distTar {
  compression = Compression.GZIP
}


distributions {
    main {
        contents {
            from(jar)
            from('README.md', 'COPYING', 'CHANGELOG.md')
        }
    }
}
